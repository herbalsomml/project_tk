import asyncio
import logging
import sys
import xml.etree.ElementTree as ET
from os import getenv
import sqlite3
import re

import requests
from aiogram import Bot, Dispatcher, html
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode
from aiogram.filters import CommandStart
from aiogram.types import InlineKeyboardButton, Message
from aiogram.utils.keyboard import InlineKeyboardBuilder

from chaturbate_poller.chaturbate_client import ChaturbateClient
from aiogram.types import InputFile
from aiogram.types import FSInputFile
from chaturbate_poller.config_manager import ConfigManager
from constants import CBR_URL

config_manager = ConfigManager()

admin_str = getenv("ADMINS")
TOKEN = getenv("BOT_TOKEN")
CB_USERNAME = config_manager.get("CB_USERNAME", getenv("CB_USERNAME"))
CB_EVENTS_TOKEN = config_manager.get("CB_TOKEN", getenv("CB_EVENTS_TOKEN"))
CB_STATS_TOKEN = getenv("CB_STATS_TOKEN")
CONTACT_TG_USERNAME = getenv("CONTACT_TG_USERNAME")
REVIEWS_LINK = getenv("REVIEWS_LINK")
IMAGE_LINK = getenv("IMAGE_LINK")
ADMINS = admin_str.split(',')
DB_NAME = getenv("DB_NAME")

bot = Bot(token=TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher()


def create_database_and_table():
    conn = sqlite3.connect(DB_NAME)
    cursor = conn.cursor()
    
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS users (
            user_id INTEGER PRIMARY KEY,
            user_name TEXT NOT NULL,
            nickname TEXT
        )
    ''')

    cursor.execute('''
        CREATE TABLE IF NOT EXISTS transactions (
            tokens INTEGER
        )
    ''')
    
    conn.commit()
    conn.close()


async def add_user(user_id, user_name, nickname):
    conn = sqlite3.connect(DB_NAME)
    cursor = conn.cursor()
    
    cursor.execute('SELECT * FROM users WHERE user_id = ?', (user_id,))
    result = cursor.fetchone()
    
    if result is None:
        cursor.execute('INSERT INTO users (user_id, user_name, nickname) VALUES (?, ?, ?)', (user_id, user_name, nickname))
        for admin in ADMINS:
            await bot.send_message(admin, f"<code>{user_name} –±—ã–ª —Å–∫—Ä—ã—à–µ–Ω –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö!</code>")
    else:
        print(f"User with ID {user_id} already exists.")

    conn.commit()
    conn.close()


def add_transaction(tokens):
    print("–í—Ö–æ–¥")
    conn = sqlite3.connect(DB_NAME)
    cursor = conn.cursor()
    
    cursor.execute('INSERT INTO "transactions" (tokens) VALUES (?)', (tokens,))


    conn.commit()
    conn.close()


def get_users():
    conn = sqlite3.connect(DB_NAME)
    cursor = conn.cursor()

    cursor.execute("SELECT user_id, user_name, nickname FROM users")
    users = cursor.fetchall()

    text = '<b>–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:</b>\n\n'

    i = 1
    for user in users:
        user_id, user_name, nickname = user
        if nickname is not None:
            text += f"{i}. <a href='https://t.me/{nickname}'>{user_name}</a>\n"
        else:
            text += f"{i}. <a href='tg://user?id={user_id}'>{user_name}</a> - ID: <code>{user_id}</code>\n"
        i += 1

    conn.close()
    return text

def get_users_amount():
    conn = sqlite3.connect(DB_NAME)
    cursor = conn.cursor()

    cursor.execute("SELECT COUNT(*) FROM users")
    count = cursor.fetchone()

    conn.close()

    return count

def get_transactions():
    conn = sqlite3.connect(DB_NAME)
    cursor = conn.cursor()

    cursor.execute("SELECT COUNT(*), SUM(tokens) FROM transactions")
    count, total_sum = cursor.fetchone()

    conn.close()

    return count, total_sum


def get_balance():
    try:
        response = requests.get(f"https://chaturbate.com/statsapi/?username={CB_USERNAME}&token={CB_STATS_TOKEN}")
        if response.status_code != 200:
            return None
        
        if 'token_balance' not in response.json():
            return None
        
        return response.json()['token_balance']
    except:
        return None


def get_rate():
    try:
        response = requests.get(CBR_URL)
        if response.status_code != 200:
            return 0
        
        root = ET.fromstring(response.content)

        valute = root.find(".//Valute[@ID='R01235']")

        if valute is not None:
            value = valute.find('Value').text
            return float(value.replace(',', '.'))
        else:
            return 0

    except Exception as e:
        print(e)
        return 0


@dp.message(CommandStart())
async def command_start_handler(message: Message) -> None:
    nickname = None
    if message.from_user.username:
        nickname = message.from_user.username
    await add_user(message.from_user.id, message.from_user.full_name, nickname)
    await message.answer(f"–ü—Ä–∏–≤–µ—Ç, <b>{message.from_user.full_name}</b>!\n–û—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Å—É–º–º—É —Ç–æ–∫–µ–Ω–æ–≤ –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ <code>–ö–£–†–°</code> :–∑")


@dp.message()
async def message_handler(message: Message) -> None:
    rate = get_rate()

    rate_25 = round((rate * 0.92), 2)
    rate_50 = round((rate * 0.93), 2)
    rate_100 = round((rate * 0.945), 2)
    rate_250 = round((rate * 0.96), 2)
    rate_500 = round((rate * 0.97), 2)

    keyboard = InlineKeyboardBuilder()
    keyboard.row(InlineKeyboardButton(text="üî• –°–æ–≤–µ—Ä—à–∏—Ç—å –æ–±–º–µ–Ω!", url=f"https://t.me/{CONTACT_TG_USERNAME}"))

    nickname = None
    if message.from_user.username:
        nickname = message.from_user.username
    await add_user(message.from_user.id, message.from_user.full_name, nickname)
    if not message.text:
        return await message.answer("<b>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–∫–µ–Ω–æ–≤ –∫–æ—Ç–æ—Ä—ã–µ –í—ã —Ö–æ—Ç–∏—Ç–µ –æ–±–º–µ–Ω—è—Ç—å, –ª–∏–±–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ <code>–ö–£–†–°</code>!</b>")
    
    if message.text.lower() == "–∫—É—Ä—Å":
        text = f"<b>–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –æ–±–º–µ–Ω–∞ - 25$</b> <i>500 —Ç–æ–∫–µ–Ω–æ–≤</i>\n\n<b>–ö—É—Ä—Å –∑–∞ $1:</b>\n<i>–æ—Ç $25 - {rate_25} —Ä—É–±.\n–æ—Ç $50 - {rate_50} —Ä—É–±.\n–æ—Ç $100 - {rate_100}\n–æ—Ç 250 - {rate_250} —Ä—É–±.\n–æ—Ç 500 - {rate_500} —Ä—É–±</i>\n\n–ß—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å —Ç–æ—á–Ω—É—é —Å—É–º–º—É, –∫–æ—Ç–æ—Ä—É—é –í—ã –ø–æ–ª—É—á–∏—Ç–µ –Ω—É–∂–Ω–æ –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–∫–µ–Ω–æ–≤  —á–∞—Ç"
        for admin in ADMINS:
            try:
                if message.from_user.username:
                    await bot.send_message(admin, f"<a href='https://t.me/{message.from_user.username}'>–Æ–ó–ï–† {message.from_user.full_name}</a> –∑–∞–ø—Ä–æ—Å–∏–ª –∫—É—Ä—Å")
                elif message.from_user.id:
                    await bot.send_message(admin, f"<a href='tg://user?id={message.from_user.id}'>–Æ–ó–ï–† {message.from_user.full_name}</a> –∑–∞–ø—Ä–æ—Å–∏–ª –∫—É—Ä—Å")
                else:
                    await bot.send_message(admin, f"–Æ–ó–ï–† –∑–∞–ø—Ä–æ—Å–∏–ª –∫—É—Ä—Å")
            except:
                pass
        return await message.answer_photo(IMAGE_LINK, caption=text, reply_markup=keyboard.as_markup())

    if message.text == "!–¥–∞–º–ø":
        if str(message.from_user.id) in ADMINS:
            db_file = FSInputFile('database.db')

            for admin in ADMINS:
                await bot.send_document(admin, db_file, caption=f"<code>–î–∞–º–ø –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—à–µ–Ω–Ω—ã–π –∞–¥–º–∏–Ω–æ–º</code><b> {message.from_user.full_name}</b>")
            return
        
    if message.text == "!—é–∑–µ—Ä—ã":
        if str(message.from_user.id) in ADMINS:
            user_list = get_users()
            return await message.answer(user_list, disable_web_page_preview=True)
        
    if message.text == "!—Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏":
        if str(message.from_user.id) in ADMINS:
            count, total = get_transactions()
            return await message.answer(f"<b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π:</b> <code>{count}</code>\n<b>–¢–æ–∫–µ–Ω–æ–≤ –æ–±–º–µ–Ω—è–ª–∏: </b><code>{total}</code>")

    if message.text == "!—Å—Ç–∞—Ç–∞":
        if str(message.from_user.id) in ADMINS:
            users_count = get_users_amount()
            count, total = get_transactions()
            return await message.answer(f"<b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:</b> <code>{users_count[0]}</code>\n\n<b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π:</b> <code>{count}</code>\n<b>–¢–æ–∫–µ–Ω–æ–≤ –æ–±–º–µ–Ω—è–ª–∏: </b><code>{total}</code>")


    if message.text.startswith("!—Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è"):
        if str(message.from_user.id) in ADMINS:
            tokens = ''.join(re.findall(r'\d+', message.text))
            add_transaction(int(tokens))
            for admin in ADMINS:
                await bot.send_message(admin, f"<code>–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –Ω–∞ {tokens} –±—ã–ª–∞ –≤–Ω–µ—Å–µ–Ω–∞ –≤ –±–∞–∑—É –∞–¥–º–∏–Ω–æ–º</code><b> {message.from_user.full_name}</b>")
            return

    try:
        tokens = int(message.text.strip())
    except:
        return await message.answer("<b>–°—É–º–º–∞ —Ç–æ–∫–µ–Ω–æ–≤ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–∏—Å–ª–æ–º!</b>")

    dollars = tokens * 0.05

    if rate <= 0:
        return await message.answer("<b>üò≤ –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫—É—Ä—Å :(</b>", parse_mode="HTML")
    
    if dollars < 25:
        return await message.answer("<b>üòî –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –∫ –æ–±–º–µ–Ω—É - 500 —Ç–æ–∫–µ–Ω–æ–≤</b>", parse_mode="HTML")
    
    if dollars >= 25 and dollars < 50:
        rate = rate_25

    if dollars >= 50 and dollars < 100:
        rate = rate_50

    if dollars >= 100 and dollars < 250:
        rate = rate_100

    if dollars >= 250 and dollars < 500:
        rate = rate_250

    if dollars >= 500:
        rate = rate_500

    for admin in ADMINS:
        try:
            if message.from_user.username:
                await bot.send_message(admin, f"<a href='https://t.me/{message.from_user.username}'>–Æ–ó–ï–† {message.from_user.full_name}</a> –∑–∞–ø—Ä–æ—Å–∏–ª –∫—É—Ä—Å –¥–ª—è <code>{tokens}</code> —Ç–∫\n–ï–º—É –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–æ <code>{round((dollars * rate), 2)} —Ä—É–±.</code>")
            elif message.from_user.id:
                await bot.send_message(admin, f"<a href='tg://user?id={message.from_user.id}'>–Æ–ó–ï–† {message.from_user.full_name}</a> –∑–∞–ø—Ä–æ—Å–∏–ª –∫—É—Ä—Å –¥–ª—è <code>{tokens}</code> —Ç–∫\n–ï–º—É –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–æ <code>{round((dollars * rate), 2)} —Ä—É–±.</code>")
            else:
                await bot.send_message(admin, f"–Æ–ó–ï–† –∑–∞–ø—Ä–æ—Å–∏–ª –∫—É—Ä—Å –¥–ª—è <code>{tokens}</code> —Ç–∫\n–ï–º—É –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–æ <code>{round((dollars * rate), 2)} —Ä—É–±.</code>")
        except:
            pass

    text = f"<b>üí± –í–∞—à –∫—É—Ä—Å:</b> {rate} —Ä—É–±. / –¥–æ–ª–ª–∞—Ä\n<b>üí≥ –í—ã –ø–æ–ª—É—á–∏—Ç–µ:</b> {round((rate * dollars), 2)} —Ä—É–±.\n<b>\n<a href='{REVIEWS_LINK}'>‚≠ê –û–¢–ó–´–í–´</a>\n<a href='t.me/{CONTACT_TG_USERNAME}'>üí¨ –°–û–í–ï–†–®–ò–¢–¨ –û–ë–ú–ï–ù</a></b>"
    await message.answer_photo(IMAGE_LINK, caption=text, reply_markup=keyboard.as_markup())


async def bot_poller() -> None:
    await dp.start_polling(bot)


async def chaturbate_poller():
    async with ChaturbateClient(CB_USERNAME, CB_EVENTS_TOKEN) as client:
        url = None

        while True:
            response = await client.fetch_events(url)

            for event in response.events:
                if event.method == "tip":
                    balance = get_balance()

                    tip = event.object.tip
                    user = event.object.user

                    add_transaction(int(tip.tokens))

                    text = f"<b>üí∏ <a href='https://chaturbate.com/{user.username}'>{user.username}</a> –æ—Ç–ø—Ä–∞–≤–∏–ª {tip.tokens} —Ç–∫. üí∏</b>"
                    if balance is not None:
                        text += f'\n\n<b><i>–ë–∞–ª–∞–Ω—Å –∞–∫–∫–∞—É–Ω—Ç–∞: {balance}</i></b>'

                    for admin in ADMINS:
                        await bot.send_message(admin, text, disable_web_page_preview=True)

            url = str(response.next_url)

async def main():
    await asyncio.gather(bot_poller(), chaturbate_poller())


if __name__ == "__main__":
    create_database_and_table()
    logging.basicConfig(level=logging.INFO, stream=sys.stdout)
    asyncio.run(main())
